
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Project URL and anon key are public values, but we follow best practices by
// keeping configuration values consistent and centralized
const SUPABASE_URL = "https://dgoyfmccassqjlydkbat.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRnb3lmbWNjYXNzcWpseWRrYmF0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYzNjYyNDIsImV4cCI6MjA2MTk0MjI0Mn0.t3bqH7jMBQr5tNAE4vOrbbLOOgrWWAW2mK3KtL5P9Bk";

// Determine if we're in a GitHub Pages environment
const isGitHubPages = window.location.hostname.includes('github.io');

// Create and export the Supabase client with comprehensive options for better reliability
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'implicit'
  },
  global: {
    headers: {
      'X-Client-Info': `supabase-js-web/2.49.4`,
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  db: {
    schema: 'public'
  }
});

// Add helper function to check authentication state
export const isAuthenticated = async () => {
  const { data } = await supabase.auth.getSession();
  return !!data.session;
};

// Add admin authentication helper
export const isAdmin = async () => {
  const { data } = await supabase.auth.getSession();
  if (!data.session) return false;
  
  // Check if user has admin role in metadata
  if (data.session.user.user_metadata?.role === 'admin') {
    return true;
  }
  
  // Check if user exists in admins table
  const { data: adminData, error } = await supabase
    .from('admins')
    .select('username')
    .eq('username', data.session.user.user_metadata?.username || '')
    .single();
  
  if (error || !adminData) {
    console.error("Admin check error:", error);
    return false;
  }
  
  return true;
};

// Admin login function
export const adminLogin = async (username: string, password: string) => {
  try {
    // First check if the credentials match an entry in the admins table
    const { data: adminData, error: adminError } = await supabase
      .from('admins')
      .select('username')
      .eq('username', username)
      .eq('password', password) // Note: In production, you should use hashed passwords
      .single();
    
    if (adminError || !adminData) {
      console.error("Admin authentication failed:", adminError);
      return { error: "Invalid admin credentials" };
    }
    
    // If admin exists in the table, sign in (or create an account if needed)
    // The JWT will contain the username claim needed for RLS policies
    const { data, error } = await supabase.auth.signInWithPassword({
      email: `${username}@admin.stkcommunity.de`, // Use a consistent email format
      password: password,
    });
    
    if (error) {
      // If the account doesn't exist yet, try to create it
      if (error.message.includes('Invalid login credentials')) {
        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
          email: `${username}@admin.stkcommunity.de`,
          password: password,
          options: {
            data: {
              username: username, // Store username in user metadata for JWT claims
              role: 'admin'
            }
          }
        });
        
        if (signUpError) {
          console.error("Admin account creation failed:", signUpError);
          return { error: "Failed to create admin account" };
        }
        
        return { data: signUpData };
      }
      
      return { error: error.message };
    }
    
    return { data };
  } catch (error) {
    console.error("Unexpected error during admin login:", error);
    return { error: "An unexpected error occurred during login" };
  }
};
